// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: time.proto

package time_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TimeV1_Create_FullMethodName     = "/time_v1.TimeV1/Create"
	TimeV1_GetSummary_FullMethodName = "/time_v1.TimeV1/GetSummary"
)

// TimeV1Client is the client API for TimeV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeV1Client interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
}

type timeV1Client struct {
	cc grpc.ClientConnInterface
}

func NewTimeV1Client(cc grpc.ClientConnInterface) TimeV1Client {
	return &timeV1Client{cc}
}

func (c *timeV1Client) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, TimeV1_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeV1Client) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, TimeV1_GetSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeV1Server is the server API for TimeV1 service.
// All implementations must embed UnimplementedTimeV1Server
// for forward compatibility
type TimeV1Server interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	mustEmbedUnimplementedTimeV1Server()
}

// UnimplementedTimeV1Server must be embedded to have forward compatible implementations.
type UnimplementedTimeV1Server struct {
}

func (UnimplementedTimeV1Server) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTimeV1Server) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedTimeV1Server) mustEmbedUnimplementedTimeV1Server() {}

// UnsafeTimeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeV1Server will
// result in compilation errors.
type UnsafeTimeV1Server interface {
	mustEmbedUnimplementedTimeV1Server()
}

func RegisterTimeV1Server(s grpc.ServiceRegistrar, srv TimeV1Server) {
	s.RegisterService(&TimeV1_ServiceDesc, srv)
}

func _TimeV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeV1_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeV1Server).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeV1_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeV1Server).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeV1_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeV1Server).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeV1_ServiceDesc is the grpc.ServiceDesc for TimeV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_v1.TimeV1",
	HandlerType: (*TimeV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TimeV1_Create_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _TimeV1_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time.proto",
}
