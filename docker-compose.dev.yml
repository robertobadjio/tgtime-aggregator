version: '3.8'

services:
  app:
    depends_on:
      tgtime-api:
        condition: service_healthy
      db:
        condition: service_healthy
    links:
      - db
  tgtime-api:
    build:
      context: .
      dockerfile: ./docker/tgtime_api/Dockerfile
    ports:
      - "1080:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializerJson.json
      MOCKSERVER_LOG_LEVEL: INFO
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
    volumes:
      - ./docker/tgtime_api/config:/config
      - ./docker/tgtime_api/config/mockserver.properties:/config/mockserver.properties
    networks:
      - tgtime-aggregator-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/liveness/probe"]
      interval: 10s
      timeout: 10s
      retries: 5
  db:
    image: postgres:16.2
    container_name: tgtime-aggregator-db
    restart: always
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - tgtime-aggregator-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    networks:
      tgtime-aggregator-network:
        aliases:
          - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 1s
  migrate:
    image: migrate/migrate
    networks:
      - tgtime-aggregator-network
    volumes:
      - ./db/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@database:${DATABASE_PORT}/${DATABASE_NAME}?sslmode=${DATABASE_SSL_MODE}", "up"]
    links:
      - db
    depends_on:
      db:
        condition: service_healthy

volumes:
  tgtime-aggregator-data: